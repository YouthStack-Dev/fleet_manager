name: Deploy Fleet Manager

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
        default: "main"

env:
  IMAGE_TAG: latest
  STACK_NAME: fleet-service_manager

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref_name }}

      # 2️⃣ Set environment (prod/dev)
      - name: Set environment based on branch
        id: set_env
        run: |
          BRANCH="${{ github.event.inputs.branch || github.ref_name }}"
          if [ "$BRANCH" = "main" ]; then
            echo "ENV=prod" >> $GITHUB_ENV
          elif [[ "$BRANCH" == dev-* ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
          else
            echo "Invalid branch: $BRANCH"
            exit 1
          fi

      # 3️⃣ Docker login to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4️⃣ Build & push Docker image
      - name: Build & push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .                   # root of repo where Dockerfile is
          file: ./Dockerfile           # path to Dockerfile
          push: true
          tags: dheerajkumarp/fleet_service_manager:${{ env.IMAGE_TAG }}

      # 5️⃣ Copy docker-compose file to VPS
      - name: Copy docker-compose file to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          source: "docker-compose_${{ env.ENV }}.yaml"
          target: "~/"

      # 6️⃣ SSH & deploy on VPS
      - name: SSH & deploy on VPS
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            # Create service.env on VPS
            cat <<EOF > ~/service.env
            DATABASE_URL=postgresql://fleetadmin:fleetpass@fleet_postgres:5432/fleet_db
            REDIS_HOST=redis_server
            REDIS_PORT=6379
            REDIS_DB=0
            REDIS_PASSWORD=redispassword
            USE_REDIS=1
            TOKEN_EXPIRY_HOURS=1
            EOF

            # Cleanup old containers & volumes
            docker compose -f ~/docker-compose_${{ env.ENV }}.yaml down --volumes --remove-orphans
            docker image prune -af
            docker volume prune -f
            docker network prune -f

            # Pull latest image
            docker pull dheerajkumarp/fleet_service_manager:${{ env.IMAGE_TAG }}

            # Deploy new version
            docker compose -f ~/docker-compose_${{ env.ENV }}.yaml up -d --force-recreate
            docker system prune -af
