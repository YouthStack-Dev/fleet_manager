name: Deploy Fleet Manager

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
        default: "main"
      remove_images:
        description: "Remove Docker images before deployment"
        required: false
        default: "true"
        type: boolean
      remove_volumes:
        description: "Remove Docker volumes (will reset database)"
        required: false
        default: "false"
        type: boolean

env:
  IMAGE_TAG: latest
  STACK_NAME: fleet-service_manager

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref_name }}

      # 2️⃣ Set environment (prod/dev)
      - name: Set environment based on branch
        id: set_env
        run: |
          BRANCH="${{ github.event.inputs.branch || github.ref_name }}"
          if [ "$BRANCH" = "main" ]; then
            echo "ENV=prod" >> $GITHUB_ENV
          elif [[ "$BRANCH" == dev-* ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
          else
            echo "Invalid branch: $BRANCH"
            exit 1
          fi

      # 3️⃣ Docker login to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4️⃣ Build & push Docker image
      - name: Build & push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .                   # root of repo where Dockerfile is
          file: ./Dockerfile           # path to Dockerfile
          push: true
          tags: dheerajkumarp/fleet_service_manager:${{ env.IMAGE_TAG }}

      # 5️⃣ Copy docker-compose file to VPS
      - name: Copy docker-compose file to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          source: "docker-compose_${{ env.ENV }}.yaml"
          target: "~/"

      # 6️⃣ SSH & deploy on VPS
      - name: SSH & deploy on VPS
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            # Create service.prod.env on VPS with secrets
            cat <<EOF > ~/service.prod.env
            DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@fleet_postgres:5432/${{ secrets.POSTGRES_DB }}
            REDIS_HOST=redis_server
            REDIS_PORT=6379
            REDIS_DB=0
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            USE_REDIS=1
            TOKEN_EXPIRY_HOURS=${{ secrets.TOKEN_EXPIRY_HOURS || '1' }}
            
            # Storage configuration
            ENV=production
            STORAGE_TYPE=filesystem
            PROD_SERVER_STORAGE_PATH=/var/lib/fleet/storage
            MAX_FILE_SIZE_MB=10
            
            EOF

            # Stop containers
            docker compose -f ~/docker-compose_${{ env.ENV }}.yaml down

            # Conditional cleanup based on inputs
            if [ "${{ github.event.inputs.remove_volumes }}" = "true" ]; then
              echo "Removing volumes (database will be reset)..."
              docker compose -f ~/docker-compose_${{ env.ENV }}.yaml down -v
              docker volume prune -f
            fi

            if [ "${{ github.event.inputs.remove_images }}" = "true" ]; then
              echo "Removing old images..."
              docker image prune -f
            fi

            # Pull latest image
            docker pull dheerajkumarp/fleet_service_manager:${{ env.IMAGE_TAG }}

            # Deploy new version
            docker compose -f ~/docker-compose_${{ env.ENV }}.yaml up -d

            echo "Deployment completed successfully!"
